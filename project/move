#!/usr/bin/env python3
"""Move item in list to another position."""

import json
import argparse
import pandas as pd

from task_tracker.helpers import move, define_idx

# establish parameters
templates = json.load(open("setup/templates.json"))
project_list = json.load(open("setup/project_list.json", "r"))

# establish parser to pull in projects to view
parser = argparse.ArgumentParser(
    description="Get entry to move."
)
parser.add_argument(
    "ref_proj",
    type=str,
    nargs="?",
    help="Project in which entry will be moved.",
)
parser.add_argument(
    "entry_type",
    type=str,
    nargs="?",
    choices=["task", "ref", "note"],
    help="List in which entry will be moved.",
)
parser.add_argument(
    "from",
    type=str,
    nargs="?",
    help="Index from which to move. Accepted arguments are zero / positive integer indices, 'HEAD', and 'TAIL'.",
)
parser.add_argument(
    "to",
    type=str,
    nargs="?",
    help="Index to which item should be moved.",
)
d = vars(parser.parse_args())

if len(project_list) == 0:
    raise ValueError(
        f"\n\tNo projects yet created.\n\tTo create a new project, run {templates['add_template']}."
    )
if not d["ref_proj"]:
    raise ValueError(f"\n\t'ref_proj' must be provided.")
if d["ref_proj"] not in project_list:
    raise ValueError(
        f"\n\t'{d['ref_proj']}' is not a valid project.\n\tAvailable projects are {project_list}."
    )
if d["entry_type"] is None:
    raise ValueError(
        f"\n\tNo entry type provided. One of ['task', 'ref', 'note'] must be specified within '{d['ref_proj']}'."
    )
if not set([d["to"], d["from"]]).issubset([None, "HEAD", "TAIL"] + [str(i) for i in range(100)]):
    raise ValueError(f"\n\t'from' and 'to' must be one of 'HEAD', 'TAIL', 0, or a positive integer less than 100.")

from_idx = define_idx(d["from"]); to_idx = define_idx(d["to"])
path = f"projects/{d['ref_proj']}/{d['entry_type']}s.csv"
df = pd.read_csv(path)
entry = df.loc[from_idx, "entry"]
df = move(df, from_index=from_idx, to_index=to_idx)
df.to_csv(path)
print(f"Entry {entry} successfully moved from position {from_idx} to position {to_idx}.")